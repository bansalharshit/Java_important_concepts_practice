 Java Theory Based Question 
==============================
1. What is Java?
Answer 1. Java is the high-level, object-oriented, robust, secure programming language, platform-independent, high performance, Multithreaded, and portable programming language. It was developed by James Gosling in may 1995. It can also be known as the platform as it provides its own JRE and API.

features of java programming language
=====================================
1.Simple: Java is easy to learn. The syntax of Java is based on C++ which makes easier to write the program in it.

2.Object-Oriented: Java follows the object-oriented paradigm which allows us to maintain our code as the combination of different type of objects that incorporates both data and behavior.

2a what is object?
answer2 an object is an instance of a class. an object is a real-world entity which has state and behavior.

2b. what is instance variable?
answer 2b. a variable which is created inside the class but outside the method is known as instance varibale. instance variable doesn't get memory at complile time. it gets memory at runtime when an object or instance is created. that is why it is known as an instance variable.

2c. what is Method>
answer2c in java a method is like a function which is used to expose the behavior of an object.
advantage of method
====================
1. code reusability
2. code optimization.

2d. what is new keyword?
answer 2d. the new keyword is used to allocate memory at runtime all objects get memory in heap memory area.

2e. what are wrapper classes?
answer 2e. The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive.

2f.autoboxing and autounboxing
==============================

Since J2SE 5.0, autoboxing and unboxing feature convert primitives into objects and objects into primitives automatically. The automatic conversion of primitive into an object is known as autoboxing and vice-versa unboxing.

2g. what are datatypes?
answer 2g. Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:

* Primitive data types:boolean, char, byte, short, int, long, float and double.

* Non-primitive data types: Classes, Interfaces, and Arrays.

datatypes and their sizes
============================
boolean--> 1bit
byte---> 8bit  -128 to 127(inclusive) and default is 0
char----> 2 byte
short----> 2 byte   -32768 to 32767 default is 0
int-------> 4 byte
long----> 8byte
float---->4 byte  flaot f1=234.5f
double----> 8byte  double d1=12.3

3. Portable: Java supports read-once-write-anywhere approach. We can execute the Java program on every machine. Java program (.java) is converted to bytecode (.class) which can be easily run on every machine.

4. Platform Independent: Java is a platform independent programming language. It is different from other programming languages like C and C++ which needs a platform to be executed. Java comes with its platform on which its code is executed. Java doesn't depend upon the operating system to be executed.

5. Secured: Java is secured because it doesn't use explicit pointers. Java also provides the concept of ByteCode and Exception handling which makes it more secured.

6. Robust: Java is a strong programming language as it uses strong memory management. The concepts like Automatic garbage collection, Exception handling, etc. make it more robust.

7. Multithreaded: We can write Java programs that deal with many tasks at once by defining multiple threads. The main advantage of multi-threading is that it doesn't occupy memory for each thread. It shares a common memory area. Threads are important for multi-media, Web applications, etc.

1A What is the Difference Between JDK, JRE and JVM?
Answer 1A 
JVM
======>Java Virtual Machine is a virtual machine that enables the computer to run the Java program. JVM acts like a run-time engine which calls the main method present in the Java code. JVM is the specification which must be implemented in the computer system. The Java code is compiled by JVM to be a Bytecode which is machine independent and close to the native code.

JRE
======>JRE stands for Java Runtime Environment. It is the implementation of JVM. The Java Runtime Environment is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment.It physically exists. It contains a set of libraries + other files that JVM uses at runtime.

JDK
=======>JDK is an acronym for Java Development Kit. It is a software development environment which is used to develop Java applications and applets. It physically exists. It contains JRE + development tools. JDK is an implementation of any one of the below given Java Platforms released by Oracle Corporation:

a.Standard Edition Java Platform
b.Enterprise Edition Java Platform
c.Micro Edition Java Platform

2. Version of Java?

Anser 2 As of September 2022, Java 19 is the latest released Java version. In March 2023, Java 20 will follow. The last long-term support version (LTS) of Java is Java 17, released in September 2021.

2a. Why are companies still stuck with Java 8?
answer 2a. Build tools (Maven, Gradle etc.) and some libraries initially had bugs with versions Java versions > 8 and needed updates
Some companies have policies to only use LTS versions and rely on their OS vendors to provide them these builds, which takes time.
 until Java 8 you were pretty much using Oracleâ€™s JDK builds and you did not have to care about licensing. Oracle changed the licensing scheme In 2019,


3. What is string?
Answer 3. In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example:
char[] ch={'j','a','v','a','t','p','o','i','n','t'};  
String s=new String(ch);  

String s="javatpoint";  
Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc.

4. Why String are immutable?
Answer 4.  The String is immutable in Java because of the security, synchronization and concurrency, caching, and class loading. The reason of making string final is to destroy the immutability and to not allow others to extend it.But we can only change the reference to the object.

for example:
import java.util.*;  
class ImmutableString{    
    public static void main(String args[]){    
        String NewString = "Hello";    
        NewString.concat("World");  
        System.out.println(NewString);    
    }    
} 
output:-> Hello

import java.util.*;  
class ImmutableString{    
    public static void main(String args[]){    
        String NewString = "Hello";    
        NewString = NewString.concat("World");  
        System.out.println(NewString);    
    }    
}   

output:-> HelloWorld

5. can we override the static Method?
Anser 5.No, we can not override the static Method because method overriding is based on dynamic binding at runtime and the static methods are bonded using static binding at compile time. So, we cannot override static methods.

5a. what is static Method
answer5a. The method that has a static keyword before the method name is known as a static method. It is also known as a class-level method. A copy of the static method is shared by all the objects of the class.The static method cannot access instance variables or methods.

5b. why static method can not call the non-static method or non-static  variable?
answer 5b. A non-static method is dependent on the object. It is recognized by the program once the object is created. But a static method can be called before the object creation. Hence you cannot make the reference.

6. any five method of string?
Answer 6.comapre(),concat(),equals(),split(),length(),replace(),compareTo(),substring().

7. Difference between String Buffer and String Builder?
Answer7. 
String Buffer:
==================> 

1.StringBuffer is synchronized i.e. thread safe. It means two threads can't call the methods of StringBuffer simultaneously.
2.StringBuffer is less efficient than StringBuilder.
3.StringBuffer was introduced in Java 1.0

String Builder
==================>
1.StringBuffer was introduced in Java 1.5
2.StringBuilder is non-synchronized i.e. not thread safe. It means two threads can call the methods of StringBuilder simultaneously.
3.StringBuilder is more efficient than StringBuffer.

Example Of StringBuffer
=========================
public class BufferTest{
public static void main(String[] args){
StringBuffer buffer=new StringBuffer("Hello");
buffer.append("java");
System.out.println(buffer);
}
}
output: hellojava

Example of StringBuilder
============================
public class BufferTest{
public static void main(String[] args){
StringBuilder builder=new StringBuilder("Hello");
builder.append("Java");
}
}
output: HelloJava

8. Stack Memory vs Heap Memory?
Answer 8. The major difference between Stack memory and heap memory is that the stack is used to store the order of method execution and local variables while the heap memory stores the objects and it uses dynamic memory allocation and deallocation. 

StackMemory
=============
1.Application:	It stores items that have a very short life such as methods, variables, and reference variables of the objects.
2. Ordering: it follows the LIFO order.
3. Efficiency: it has faster access,allocation,and deallocation.
4. MemorySize: it is smaller in size;
5. Visibility of Scope: The Variable are visible only to the owner thread.
6. Generation of Space: When a thread is created, the operating system automatically allocates the stack.
7.Allocation/Deallocation: it is done automatically by the compiler.
8. Thread-safety: it is thread-safe because each thread has its own stack.
9.Exception Throws: Jvm throws the java.lang.StackOverFlowError(if stack size is greater than limit)

HeapMemory/HeapSapce
======================
1.Application:	It stores Ojects and java Runtime Environment (JRE) classes.
2. Ordering: it does not follow any order because it is a dynamic memory allocation
3. Efficiency: it has slower access,allocation,and deallocation.
4. MemorySize: it is larger in size;
5. Visibility of Scope: The Variable are visible to all thread.
6. Generation of Space:To create the heap space for the application, the language first calls the operating system at run time.
7.Allocation/Deallocation: It is done manually by the programmer.
8. Thread-safety: It is not thread-safe, so properly synchronization of code is required.
9.Exception Throws: Jvm throws the java.lang.OutOfMemoryError(if the jvm is unable to create a new native method);

9. what is String Pool?
Anser9. String pool is nothing but a storage area in Java heap where string literals stores. It is also known as String Intern Pool or String Constant Pool.

Whenever we create a string the string object occupies some space in the heap memory. Creating a number of strings may increase the cost and memory too which may reduce the performance also.

When we create a string literal, the JVM first check that literal in the String pool. If the literal is already present in the pool, it returns a reference to the pooled instance. If the literal is not present in the pool, a new String object takes place in the String pool.

10. final finally finalize
Answer 10. The final, finally, and finalize are keywords in Java.The basic difference between final, finally and finalize is that the final is an access modifier, finally is the block in Exception Handling and finalize is the method of object class.

final
========
1.Definition:-->final is the keyword and access modifier which is used to apply restrictions on a class, method or variable.
2.Application to:-->Final keyword is used with the classes, methods and variables.
3.Functionality:---->1) Once declared, final variable becomes constant and cannot be modified.
(2) final method cannot be overridden by sub class.
(3) final class cannot be inherited.
4. Execution:-->Final method is executed only when we call it.

Finally
=========>
1.Definition:-->finally is the block in Java Exception Handling to execute the important code whether the exception occurs or not.
2.Application to:-->Finally block is always related to the try and catch block in exception handling
3.Functionality:---->(1) finally block runs the important code even if exception occurs or not.
(2) finally block cleans up all the resources used in try block
4. Execution:-->Finally block is executed as soon as the try-catch block is executed.
It's execution is not dependant on the exception

Finalize
================>
1.Definition:-->finalize is the method in Java which is used to perform clean up processing just before object is garbage collected.
2.Application to:-->finalize() method is used with the objects
3.Functionality:---->(1) finalize method performs the cleaning activities with respect to the object before its destruction.

4. Execution:-->finalize method is executed just before the object is destroyed

10a. what is garbage collection in java?
answer 10a.Garbage Collection is a process to destrory the unused objects due to which java provides better memory management.

Advantage of Garbage Collection
===================================
1. it makes java memory efficeint because garbage collector removes the unreferenced objects from the heap memory.
2. it is automatically done by the garbage collector(a part of jvm) so we don't need to make extra efforts.

Note: the garbage collector of jvm collects only those objects that are created by new keywords .so if you have created any object without new keyword you can use finalize mehtod to perform cleanup processing(destroying remaining objects)

gc() Method
==============
The gc() method is used to invoke the garbage collector to perform cleanup processing . the gc() is found in System and runtime classes.
 
11. what is method overloading and method overriding?
Answer 11.
Method overLoading
=====================>
If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.

Method overloading increases the readability of the program.
There are two ways to overload the method in java

1.By changing number of arguments
2.By changing the data type

Method Overriding
===================>
If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.

Method overriding is used to provide the specific implementation of a method which is already provided by its superclass.
Method overriding is used for runtime polymorphism

Rules for Java Method Overriding
1. The Method must have the same name as in the parent class.
2. The method must have the same parameter as in the parent class.
3. there must be an is-a relationshi(inheritance)

11a.Why Method Overloading is not possible by changing the return type of method only?
Answer 11a. Because of Ambiguity.
class Adder{
static int add(int a,int b){return a+b};
static double add(int a,int b){return a+b};
}
class TestOverloading{
public static void main(String[] args){
System.out.println(Adder.add(11,12));// ambiguity
}
}

11B can we overload java main() method?
Answer 11b. Yes, by method overloading. You can have any number of main methods in a class by method overloading. But JVM calls main() method which receives string array as arguments only. Let's see the simple example:
class TestOverloading4{  
public static void main(String[] args){
System.out.println("main with String[]")
}
  
public static void main(String args){
System.out.println("main with String")
}
  
public static void main(){
System.out.println("main without args")
}  
}  

12. What is Abstraction?
Answer 12. Abstraction is a process of hiding the implementation details and showing only functionality to the user.
Ways to achieve Abstraction
=============================
1. Abstract class(0 to 100%)
2. Interface(100%)

Abstract class
================> A class which is declared as abstract is known as an abstract class. It can have abstract and non-abstract methods. It needs to be extended and its method implemented. It cannot be instantiated.It can have constructors and static methods also.It can have final methods which will force the subclass not to change the body of the method.

Abstract Method
==================>A method which is declared as abstract and does not have implementation is known as an abstract method.

for example : abstract void printStatus();//no method body and abstract 

13. What is Encapsulation and inheritance?
Answser 13. 
Inheritance
=============>Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.

Note: Inheritance represents the IS-A relationship which is also known as a parent-child relationship.

why we use inheritance
=========================
1. For method Overriding (so runtime Polymorphism can be achieved).
2. for Code Reusability.

Note: extends--> the meaning of extends is to increase the functionality.

Types of Inheritance in java
===============================>
on the class level: single multilevel and hierarchical
on the interface level: mulitple and hybrid

why multiple inheritance is not supported in java?
answer to reduce the complexity and simplify the language , mulitple inheritance is not supported in java.in short ambiguity problem will arise.

for example:
=============
class A{  
void msg(){System.out.println("Hello");}  
}  
class B{  
void msg(){System.out.println("Welcome");}  
}  
class C extends A,B{//suppose if it were  
   
 public static void main(String args[]){  
   C obj=new C();  
   obj.msg();//Now which msg() method would be invoked?  
}  
} 
output: compile time error

Encapsulation
++++++++++++++++>Encapsulation in Java is a process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines.

We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can use setter and getter methods to set and get the data in it.

The Java Bean class is the example of a fully encapsulated class.

Advantage of Encapsulation
===========================>
1. way to achieve "Data Hiding" in java because other class will not be able to access the data through the private data members.
 2. the encapsulate class is easy to test. so it is better in unit testing.

//A Java class which is a fully encapsulated class.  
//It has a private data member and getter and setter methods.  
package com.javatpoint;  
public class Student{  
//private data member  
private String name;  
//getter method for name  
public String getName(){  
return name;  
}  
//setter method for name  
public void setName(String name){  
this.name=name  
}  
}  

package com.javatpoint;  
class Test{  
public static void main(String[] args){  
//creating instance of the encapsulated class  
Student s=new Student();  
//setting value in the name member  
s.setName("vijay");  
//getting value of the name member  
System.out.println(s.getName());  
}  
} 

output: vijay
note: comile by javac Test.java
runby:java com.javapoint.Test/ java Test

13a. what is class?
Answer 13a. A class is a group of objects which have common properties. it is a template or blueprint from which objects are created.

14. What is Enum?
Answer 14. An Enum is a special "class" that represents a group of constants (unchangeable variables,like final variables).

enum Level{
LOW,
MEDIUM,
HIGH
}

Level myVar=Level.MEDIUM;
note: Enum is short for enumerations which means specifically listed.

  public static void main(String[] args) {
    Level myVar = Level.MEDIUM; 
    System.out.println(myVar);
  }
}
output: MEDIUM

Enum in a swithch Statement

enum Level {
  LOW,
  MEDIUM,
  HIGH
}

public class Main {
  public static void main(String[] args) {
    Level myVar = Level.MEDIUM;

    switch(myVar) {
      case LOW:
        System.out.println("Low level");
        break;
      case MEDIUM:
         System.out.println("Medium level");
        break;
      case HIGH:
        System.out.println("High level");
        break;
    }
  }
}

output: Medium Level

Loop Through an Enum
======================
the enum type has a value() method, which returns an array  of all enum constants. This method is useful when you want to loop through the constants of an enum:

for(Level myVar : Level.values()){
System.out.println(myVar):
}

output:
LOW
MEDIUM
HIGH

14a. Difference Between Enums and Classes
An enum can, just like a class, have attributes and methods. The only difference is that enum constants are public, static and final (unchangeable - cannot be overridden).

An enum cannot be used to create objects, and it cannot extend other classes (but it can implement interfaces).

15. what is Interface and polymorphism?
Answer 15. 
Interface
===========>The interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple inheritance in Java.

It cannot be instantiated just like the abstract class./ or we can not make the object of interface

Since Java 8, we can have default and static methods in an interface.

Since Java 9, we can have private methods in an interface.

15a. Why we use java interface?
Answer 15a.
1. it is used to achieve abstraction.
2. we can support the functionality of multiple inheritance.
3. it can be used to achieve loose coupling.

15b. what is marker or tagged interface?
answer 15b. An interface which has no member is known as a marker or tagged interface, for example, Serializable, Cloneable, Remote, etc.

public interface Serializable{
}
Note: nested interface is possible
interface printTable{
void print();
interface MessagePrintable{
void msg();
}
}


16. what is super keyword?
Answer 16. The super keyword in Java is a reference variable which is used to refer immediate parent class object.

Whenever you create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable.
Usage of Usper Keyword
=======================>
1. Super can be used to refer immediate parent class instance variable.
2. super can be used to invoke immediate parent class method.
3. super() can be used to invoke immediate parent class constructor.

Case1. class Animal{  
String color="white";  
}  
class Dog extends Animal{  
String color="black";  
void printColor(){  
System.out.println(color);//prints color of Dog class  
System.out.println(super.color);//prints color of Animal class  
}  
}  
class TestSuper1{  
public static void main(String args[]){  
Dog d=new Dog();  
d.printColor();  
}}  

output: black , white

case2: class Animal{  
void eat(){System.out.println("eating...");}  
}  
class Dog extends Animal{  
void eat(){System.out.println("eating bread...");}  
void bark(){System.out.println("barking...");}  
void work(){  
super.eat();  
bark();  
}  
}  
class TestSuper2{  
public static void main(String args[]){  
Dog d=new Dog();  
d.work();  
}}  

output: eating..
barking.....

Case3: class Animal{  
Animal(){System.out.println("animal is created");}  
}  
class Dog extends Animal{  
Dog(){  
super();  
System.out.println("dog is created");  
}  
}  
class TestSuper3{  
public static void main(String args[]){  
Dog d=new Dog();  
}}  

output: 
animal is created
dog is created

17. what is constructor?

Answer 17. In Java, a constructor is a block of codes similar to the method. It is called when an instance of the class is created. At the time of calling constructor, memory for the object is allocated in the memory.

Note: java compiler provides a default constructor by default.

There are two types of constructors in Java: no-arg constructor, and parameterized constructor.

Remark: A java constructor cannot be abstract static final and synchronized but it could be private protected pubic or default 

17a what is the purpose of a default constructor?
answer 17a. the default constructor is used to provide the default values to the objects like 0, null etc depending on the types.


18. what is this keyword?
Answer 18. this is a referece variable that refers to the current object. used to invoke current class method,constructor.

19. what is checked and unchecked exception?
Answer 19. 
20. Differece Between Equals and == method?
21. What is Orm?
22. what is jdbc?
23. what is hibernate?
24. what is spring?
25. what is spring boot?
26. what is @component scan?
27. What is AutoWiring?
28. What is xmL file?
29. what is dependency injection?
30. what is IOC container?
31. what is bean?
32. what are pojos class?
33. what is spring mvc archetecture?
34. difference between comparator and comparable?
35. explain application.properties file?
36. what is restTemplate ?
37. what is an Api?
38. explain the internal working of hashmap?
39. what is @service annotation, @repository ?
40. how the exception handling works in spring boot?
41. what is spring security?
42. what is an aws?
43. what is swagger?
44. whai is postman?
45. what is client server model?
46. how many ways are there to create Spring boot Application?
47. What are Data and Database?
Answer 47a Data--> it is a collection of raw and isolated facts.
information--> it is organised way of data in understadable meaning. 
48. What are DBMS and RDBMS?
49. what is normalization?
50. Acid Properties in DBMS?
51. Spring Version and which version are you currently using?
52. what is pom.xml file?
53. What is RestApi?
54. All the Dependencies In Pom.xml File and its uses?
55. What is serialization and decerialization?
answer 55. 
56. What is Thread and process?
answer 56.
57. What is MultiThreading?
58. life cycle of multithreading?
59. Expalin the Hiriericy of Collections?

answer 59. java.lang.iterable(Interface)---->collection(Interface)--->List(interface),Set(Interface)and Queue(Interface)

again List(Interface)-->Arraylist(class),Linked(Listclass),Vector(class)-->Stack(class)

again Set(Interface)-->[HashSet(class)-->LinkedHashSet(class)],[SortedSet(Interface)-->TreeSet(class)

again Queue(Interface)-->PriorityQueue(class),Deque(Interface)-->ArrayDeque(Class)

Note: from the java 1.5 version onwards LinkedList class also implements the Deque interface. 

The Iterable Interface:
========================
This is the root interface for the entire collection framework. The collection interface
extends the Iterable interface. Therefore, inherently, all the interfaces and classes
implement this interface. The main functionality of this interface is provides the facility of
iterating the elements in a forward direction only. This interface contains only one
abstract method which is the iterator

public Iterator<T> iterator();
it returns the iterator over the elements of type T.


Method inside the Iterator Inteface:
====================================
1.public boolean hasNext(); it returns true if the iterator has more elements otherwise it returns false;

2.public Object next();it return the element and moves the cursor pointer to the next element.

3. public void remove(): it removes the elements from the iterator.

60. What is colelctions framework?
Answer 60 Collection Framework defines several predefined classes and interface which can be used to represent group of object as single object.
61. What is the Differnce Between Array and ArrayList?
62. What is Set?
63. What is Treeset and hashset?
64. What is an stack and queue data structrue?
65. what is an array?
66. what is an linked list?
66. difference between array and collection?
answer 66.
1. Array are having fixed size and allow only homonoeneous elements but in case of collection hetrogenous are also allowed. in case of array we want to add the element over its size then jvm will raise an exception like ArrayIndexOutOfBoundException where as Collections are having dynamically growable nature.

2. array does not have predefined methods to perform searching and sorting orperations over the elements but in collection we have predefined methods to perform searching and sorting operations.

Note: in java we can group multiple object as a single object by using either by collections or by using Map also.

Note: collection belongs to java.util package.

67. what is sql?
answer 67.sql stands for structured query language. sql language is a collection of predefined commands.
like DDL(data defination language)(create,alter,drop,truncate,rename)
2.DML(data manipulation language) (insert,update and delete)
3.DRL(data retrival language)(select)
4.TCL(Transaction control language)
5.DCL(decision control language) (grant revoke)

Question:DDL Commands Information
1. Rename--> rename table student to students;
 alter-it is used to change the structure of the existing talble.
four sub command of alter
=====================
a.add
b.modify
c.drop
d.change

a. add-->alter table student add address varchar(28);
this will add the column to the existing table.
b.modify-->it is used to change the column datatype of column size.
alter table student modify address varchar(20).
c.drop--> alter table student drop column address;
d. change--> alter table student change name sname varchar(12);

* to Drop entire Table
=======================>
drop table student;
note: DDL command can not be rolled back like drop command is ddl command.

*truncate: this command is used to remove all the records of your talbe permanently can not be rolled back.

example: truncate table student;

Rename command
==================>
rename table student to students;

DML Command
==============>
1.Insert-> insert into student values(10,'single qoute',800);
insert partial insertion--> insert into student(roll,name) values(15,'rohan');
note:duplicate records are allowed here.

2.update->update student set marks=marks+50;
( working on every record)
update student set marks =marks+30 where roll=12;

how to deal with null
=======================>
update student set name='harshit' where marks is null;

3.Delete command--> this delete command we can rollback where as truncate command can not be rollback.

delete from student where name='harshit';

DRL(data Retrival Language)
=============================>
syntax: 
select col1,col2,..
from tablename
where condition
[groupby colname]
having condition
orderby colname[asc/desc]

Note: orderby is used to sort the record according to asc/desc

operators
============
1.Arithmatic operator(*,/,+,-,%) use after select statement and remaning operator after where clause only
2.Relational operator(=><<=>=[!= or <>])
3.logical operator (AND OR NOT)
4.Specia operator(between, isnull isnotnull, like not like,in notin);
select * from student where marks in(800,500,700);

2. DSA Question Asked in interview
======================================

1. Prime Number Program- all types
2. reverse words in String
3. palindrome program 
4. longest palindrom substring
5. valid parenthesis
6. two sum 
7. valid palindrome
8. fibonachi series 
9. factorial 
10.bubble sort and selection sort 
11. remove duplicates from array
12. merge two sorted array
13. reverse a number 
14. add two numbers 